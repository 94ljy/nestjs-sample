# name: Deploy-OLD

# on:
#   push:
#     braches: ['qwer']

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: aws
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#           aws-region: ap-northeast-2

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Build and Push
#         id: build
#         uses: docker/build-push-action@v5
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: api
#           IMAGE_TAG: ${{ github.sha }}
#         with:
#           push: true
#           context: .
#           tags: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
#           provenance: false
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: task-definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: api
#           IMAGE_TAG: ${{ github.sha }}
#         with:
#           task-definition: 'deploy/dev.json'
#           container-name: 'api-test'
#           image: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}

#       # - name: update task definition
#       #   run: |
#       #     aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }}

#       - name: deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: api-service
#           cluster: dev
#       #
#       # - name: Build, tag, and push docker image to Amazon ECR
#       #   env:
#       #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       #     REPOSITORY: api
#       #     IMAGE_TAG: ${{ github.sha }}
#       #   run: |
#       #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#       #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#       # - name: Setup Node.js
#       #   uses: actions/setup-node@v2
#       #   with:
#       #     node-version: '20.13'
#       #     cache: 'npm'

#       # - name: Install dependencies
#       #   run: npm install

#       # - name: Build
#       #   run: npm run build

#       # - name: Deploy
#       #   uses: appleboy/scp-action@v0.1.7
#       #   with:
#       #     host: ${{ secrets.SERVER_HOST }}
#       #     key: ${{ secrets.SERVER_KEY }}
#       #     username: ubuntu
#       #     source: 'dist/, package.json, package-lock.json'
#       #     target: '/home/ubuntu/app/'

#       # - name: Deploy2
#       #   run: |
#       #     echo "${{ secrets.SERVER_KEY }}" > key.pem
#       #     ssh ubuntu@${{ secrets.SERVER_HOST }} -i key.pem 'cd /home/ubuntu/app && npm install --production && kill -9 $(lsof -t -i:3000) && npm run start:prod'
#       # - name: Deploy3
#       #   uses: appleboy/ssh-action@v1.0.3
#       #   with:
#       #     host: ${{ secrets.SERVER_HOST }}
#       #     key: ${{ secrets.SERVER_KEY }}
#       #     username: ubuntu
#       #     script_stop: true
#       #     script: |
#       #       export NVM_DIR=~/.nvm
#       #       source ~/.nvm/nvm.sh
#       #       cd /home/ubuntu/app
#       #       npm install --production
#       #       kill -9 $(lsof -t -i:3000)
#       #       nohup npm run start:prod > /dev/null 2>&1 &
# #
